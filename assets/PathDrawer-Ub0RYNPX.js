import{d as u}from"./index-CKF4anYh.js";function b(s,e,v){const c=v.segments[0],y=c.values[0];s.moveTo(y.x*e,y.y*e);for(const l of v.segments){const a=l.values[0],t=1,n=2,x=3;switch(l.type){case"line":s.lineTo(a.x*e,a.y*e);break;case"bezier":s.bezierCurveTo(l.values[t].x*e,l.values[t].y*e,l.values[n].x*e,l.values[n].y*e,l.values[x].x*e,l.values[x].y*e);break;case"quadratic":s.quadraticCurveTo(l.values[t].x*e,l.values[t].y*e,l.values[n].x*e,l.values[n].y*e);break;case"arc":s.arc(a.x*e,a.y*e,l.values[t].x*e,l.values[n].x,l.values[n].y);break;case"ellipse":s.ellipse(a.x*e,a.y*e,l.values[t].x*e,l.values[t].y*e,l.values[n].x,l.values[x].x,l.values[x].y)}}if(!v.half)return;const f=1,r=0;for(let l=v.segments.length-f;l>=r;l--){const a=v.segments[l],t=a.values[0],n=1,x=2;switch(a.type){case"line":s.lineTo(t.x*-e,t.y*e);break;case"bezier":s.bezierCurveTo(-a.values[x].x*e,a.values[x].y*e,-a.values[n].x*e,a.values[n].y*e,t.x*e,t.y*e);break;case"quadratic":s.quadraticCurveTo(-a.values[n].x*e,a.values[n].y*e,-a.values[x].x*e,a.values[x].y*e);break}}}class g{draw(e){const{context:v,particle:o,radius:c}=e;o.pathData&&b(v,c,o.pathData)}particleInit(e,v){const o=v.shapeData;o&&(v.pathData=u({},o))}}export{g as PathDrawer};
