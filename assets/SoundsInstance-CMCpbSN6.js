import{g as A,i as g,u as E}from"./SoundsPlugin-BcihY1UA.js";import{e as f,c as N,Q as y,W as k,m as L,Z as w,L as B,x,q as S,a9 as b}from"./index-CKF4anYh.js";const O=1,D=1,C=0;function _(c){var v;const s=document.createElement("img"),{clickCb:a,container:t,display:e,iconOptions:i,margin:n,options:u,pos:r,rightOffsets:l}=c,{width:o,path:d,style:m,svg:h}=i;return q(s,r.top+n,r.right-(n*(l.length+D)+o+l.reduce((I,M)=>I+M,0)),e,u.fullScreen.zIndex+O,o,n,m),s.src=d??(h?`data:image/svg+xml;base64,${btoa(h)}`:""),(((v=t.canvas.element)==null?void 0:v.parentNode)??document.body).append(s),s.addEventListener("click",()=>{a()}),s}function p(c){c&&c.remove()}function q(c,s,a,t,e,i,n,u){c.style.userSelect="none",c.style.webkitUserSelect="none",c.style.position="absolute",c.style.top=`${s+n}px`,c.style.left=`${a-n-i}px`,c.style.display=t,c.style.zIndex=`${e+O}`,c.style.cssText+=u}class T{constructor(s,a){this._addBuffer=t=>{const e=t.createBufferSource();return this._audioSources.push(e),e},this._addOscillator=t=>{const e=t.createOscillator();return this._audioSources.push(e),e},this._initEvents=()=>{const t=this._container,e=t.actualOptions.sounds;if(!(!(e!=null&&e.enable)||!t.canvas.element))for(const i of e.events){const n=u=>{(async()=>{const r=i.filter&&!i.filter(u);if(this._container!==u.container)return;if(!this._container||this._container.muted||this._container.destroyed){f(i.event,o=>{this._engine.removeEventListener(o,n)});return}if(r)return;const l=0;if(i.audio)this._playBuffer(y(i.audio));else if(i.melodies){const o=b(i.melodies);o.melodies.length?await Promise.allSettled(o.melodies.map(d=>this._playNote(d.notes,l,o.loop))):await this._playNote(o.notes,l,o.loop)}else if(i.notes){const o=b(i.notes);await this._playNote([o],l,!1)}})()};f(i.event,u=>{this._engine.addEventListener(u,n)})}},this._mute=async()=>{const t=this._container,e=this._getAudioContext();for(const i of this._audioSources)this._removeAudioSource(i);this._gain&&this._gain.disconnect(),await e.close(),t.audioContext=void 0,this._engine.dispatchEvent("soundsMuted",{container:this._container})},this._playBuffer=t=>{const e=this._audioMap.get(t.source);if(!e)return;const i=this._container.audioContext;if(!i)return;const n=this._addBuffer(i);n.loop=t.loop,n.buffer=e,n.connect(this._gain??i.destination),n.start()},this._playFrequency=async(t,e)=>{if(!this._gain||this._container.muted)return;const i=this._getAudioContext(),n=this._addOscillator(i);return n.connect(this._gain),n.type="sine",n.frequency.value=t,n.start(),new Promise(u=>{setTimeout(()=>{this._removeAudioSource(n),u()},e)})},this._playMuteSound=()=>{if(this._container.muted)return;const t=this._getAudioContext(),e=t.createGain();e.connect(t.destination),e.gain.value=0;const i=t.createOscillator();i.connect(e),i.type="sine",i.frequency.value=1,i.start(),setTimeout(()=>{i.stop(),i.disconnect(),e.disconnect()})},this._playNote=async(t,e,i)=>{if(this._container.muted)return;const n=t[e];if(!n)return;const u=n.value,r=f(u,async(d,m)=>this._playNoteValue(t,e,m));await(N(r)?Promise.allSettled(r):r);let o=e+1;i&&o>=t.length&&(o=o%t.length),!this._container.muted&&await this._playNote(t,o,i)},this._playNoteValue=async(t,e,i)=>{const n=t[e];if(!n)return;const u=y(n.value,i,!0);try{const r=A(u);if(!k(r))return;await this._playFrequency(r,n.duration)}catch(r){L().error(r)}},this._removeAudioSource=t=>{t.stop(),t.disconnect(),this._audioSources.splice(this._audioSources.indexOf(t),1)},this._unmute=()=>{const t=this._container,e=t.actualOptions,i=e.sounds;if(!i)return;const n=this._getAudioContext();this._audioSources||(this._audioSources=[]);const u=n.createGain();u.connect(n.destination),u.gain.value=i.volume.value/w,this._gain=u,this._initEvents(),this._engine.dispatchEvent("soundsUnmuted",{container:this._container})},this._updateMuteIcons=()=>{const t=this._container,e=t.actualOptions.sounds;if(!(e!=null&&e.enable)||!e.icons.enable)return;const i=this._muteImg,n=this._unmuteImg;i&&(i.style.display=t.muted?"block":"none"),n&&(n.style.display=t.muted?"none":"block")},this._updateMuteStatus=async()=>{const t=this._container,e=this._getAudioContext();t.muted?(await(e==null?void 0:e.suspend()),await this._mute()):(await(e==null?void 0:e.resume()),this._unmute(),this._playMuteSound())},this._updateVolume=async()=>{var n;const t=this._container,e=t.actualOptions.sounds;if(!(e!=null&&e.enable))return;B(this._volume,e.volume.min,e.volume.max);let i=!1;this._volume<=C&&!t.muted?(this._volume=0,t.muted=!0,i=!0):this._volume>C&&t.muted&&(t.muted=!1,i=!0),i&&(this._updateMuteIcons(),await this._updateMuteStatus()),(n=this._gain)!=null&&n.gain&&(this._gain.gain.value=this._volume/w)},this._container=s,this._engine=a,this._volume=0,this._audioSources=[],this._audioMap=new Map}async init(){const s=this._container,a=s.actualOptions,t=a.sounds;if(!(t!=null&&t.enable))return;if(t.autoPlay&&g()){const i=()=>{removeEventListener(x,i),removeEventListener(S,i),E(),this.unmute()},n={capture:!0,once:!0};addEventListener(x,i,n),addEventListener(S,i,n)}this._volume=t.volume.value;const e=t.events;this._audioMap=new Map;for(const i of e){if(!i.audio)continue;const n=f(i.audio,async u=>{const r=await fetch(u.source);if(!r.ok)return;const l=await r.arrayBuffer(),o=this._getAudioContext(),d=await o.decodeAudioData(l);this._audioMap.set(u.source,d)});n instanceof Promise?await n:await Promise.allSettled(n)}}async mute(){this._container.muted||await this.toggleMute()}async start(){const s=this._container,a=s.actualOptions,t=a.sounds;if(!(t!=null&&t.enable)||!s.canvas.element)return;s.muted=!0;const e=s.canvas.element,i={top:e.offsetTop,right:e.offsetLeft+e.offsetWidth},{mute:n,unmute:u,volumeDown:r,volumeUp:l}=t.icons,o=10,d=async()=>{await this.toggleMute()},m=t.icons.enable,h=m?"block":"none";this._muteImg=_({container:s,options:a,pos:i,display:h,iconOptions:n,margin:o,rightOffsets:[r.width,l.width],clickCb:d}),this._unmuteImg=_({container:s,options:a,pos:i,display:"none",iconOptions:u,margin:o,rightOffsets:[r.width,l.width],clickCb:d}),this._volumeDownImg=_({container:s,options:a,pos:i,display:h,iconOptions:r,margin:o,rightOffsets:[l.width],clickCb:async()=>{await this.volumeDown()}}),this._volumeUpImg=_({container:s,options:a,pos:i,display:h,iconOptions:l,margin:o,rightOffsets:[],clickCb:async()=>{await this.volumeUp()}}),!g()&&t.autoPlay&&await this.unmute()}stop(){this._container.muted=!0,(async()=>(await this._mute(),p(this._muteImg),p(this._unmuteImg),p(this._volumeDownImg),p(this._volumeUpImg)))()}async toggleMute(){const s=this._container;s.muted=!s.muted,this._updateMuteIcons(),await this._updateMuteStatus()}async unmute(){this._container.muted&&await this.toggleMute()}async volumeDown(){const s=this._container,a=s.actualOptions.sounds;a!=null&&a.enable&&(s.muted&&(this._volume=0),this._volume-=a.volume.step,await this._updateVolume())}async volumeUp(){const s=this._container,a=s.actualOptions.sounds;a!=null&&a.enable&&(this._volume+=a.volume.step,await this._updateVolume())}_getAudioContext(){const s=this._container;return s.audioContext||(s.audioContext=new AudioContext),s.audioContext}}export{T as SoundsInstance};
